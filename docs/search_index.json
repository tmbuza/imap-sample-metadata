[["index.html", "IMAP: Integrated Microbiome Analysis Pipelines End-to-End Practical User Guides Using Integrated Approaches Getting Started with Metadata Exploration", " IMAP: Integrated Microbiome Analysis Pipelines End-to-End Practical User Guides Using Integrated Approaches Teresia Mrema-Buza 2024-02-16 Getting Started with Metadata Exploration In this chapter, we explore the significance of microbiome sample metadata, shedding light on its crucial role in extracting meaningful insights from microbiome datasets. In addition to theoretical insights, we’ll provide hands-on demonstrations. Learn how to download Sequence Read Archive (SRA) metadata, gaining practical experience in obtaining detailed information about microbiome samples. We will also guide you through the exploration of associated fixed and experimental variables, showcasing how to navigate and interpret these critical components. Let’s dive into the fundamentals of microbiome sample metadata to enhance the depth of your analysis. Happy exploring! "],["understanding-sample-metadata.html", "1 Understanding Sample Metadata 1.1 What is metadata? 1.2 Metadata structure 1.3 Embedded metadata", " 1 Understanding Sample Metadata 1.1 What is metadata? Metadata is a set of data that describes and provides information about other data. It is commonly defined as data about data. Sample metadata described here refers to the description and context of the individual sample collected for a specific microbiome study. 1.2 Metadata structure Metadata collected at different stages are typically organized in an Excel or Google spreadsheet where: The metadata table columns represent the properties of the samples. The table rows contain information associated with the samples. Typically, the first column of sample metadata is Sample ID, which designates the key associated with individual samples. Sample ID must be unique. 1.3 Embedded metadata In most cases, you will find the metadata detached from the experimental data. Embedded metadata integrates the experimental data, especially for graphics. Major microbiome analysis platforms require sample metadata, commonly referred to as a mapping file when performing downstream analysis. "],["downloading-ncbi-sra-metadata.html", "2 Downloading NCBI-SRA metadata 2.1 Manually via SRA Run Selector 2.2 Computationally via Entrez Direct 2.3 Computationally using pysradb 2.4 Example querying SRA or ENA with a keyword", " 2 Downloading NCBI-SRA metadata Different methods exist for downloading sample metadata deposited in the Sequence Read Archive (SRA) or the European Nucleotide Archive (ENA). Each process yields slightly different information, so it is an ideal habit to explore which method gives you what suits you best. For demo: We will explore more on sample metadata retrieved from five randomly selected microbiome BioProjects, including: PRJNA477349: 16S rRNA from bushmeat samples collected from Tanzania Metagenome (Multispecies). PRJNA802976: Changes to Gut Microbiota following Systemic Antibiotic Administration in Infants (Multispecies). PRJNA322554: The Early Infant Gut Microbiome Varies In Association with a Maternal High-fat Diet (Multispecies). PRJNA937707: Microbiome associated with spotting disease in the purple sea urchin (Multispecies). PRJNA589182: 16S rDNA gene sequencing of the phyllosphere endophytic bacterial communities colonizing wild Populus trichocarpa Raw sequence reads(Multispecies). 2.1 Manually via SRA Run Selector We can manually retrieve metadata from the SRA database via the SRA Run Selector. Note that the SRA filename for metadata is automatically named SraRunTable.txt. Users can change the default TXT extension to like CSV if preferred. In our demo, we will use CSV to save the metadata file in the data/ folder. Example screen shot of SRA Run Selector for metadata associated with the NCBI-SRA bioproject number PRJNA477349 2.2 Computationally via Entrez Direct #!/bin/bash esearch -db sra -query &#39;PRJNA477349[bioproject]&#39; | efetch -format runinfo &gt;data/runinfo_PRJNA477349_metadata.csv; esearch -db sra -query &#39;PRJNA802976[bioproject]&#39; | efetch -format runinfo &gt;data/runinfo_PRJNA802976_metadata.csv; esearch -db sra -query &#39;PRJNA322554[bioproject]&#39; | efetch -format runinfo &gt;data/runinfo_PRJNA322554_metadata.csv; esearch -db sra -query &#39;PRJNA937707[bioproject]&#39; | efetch -format runinfo &gt;data/runinfo_PRJNA937707_metadata.csv; esearch -db sra -query &#39;PRJNA589182[bioproject]&#39; | efetch -format runinfo &gt;data/runinfo_PRJNA589182_metadata.csv; 2.3 Computationally using pysradb 2.3.1 Create pysradb environment The pysradb tool can obtain metadata from SRA and ENA. Here we will create an independent environment and install pysradb. We can delete this env when no longer needed. To learn more click here. First, we create a pysradb environment and install the pysradb tool. Then we use pysradb to download the SRA metadata on CLI. conda activate base conda create -c bioconda -n pysradb PYTHON=3 pysradb 2.3.2 Using a bash script #!/bin/bash # Shell script: workflow/scripts/pysradb_sra_metadata.sh pysradb metadata PRJNA477349 --detailed &gt;data/PRJNA477349_pysradb.csv pysradb metadata PRJNA802976 --detailed &gt;data/PRJNA802976_pysradb.csv pysradb metadata PRJNA322554 --detailed &gt;data/PRJNA322554_pysradb.csv pysradb metadata PRJNA937707 --detailed &gt;data/PRJNA937707_pysradb.csv pysradb metadata PRJNA589182 --detailed &gt;data/PRJNA589182_pysradb.csv 2.3.3 Using a python script # Python script: workflow/scripts/pysradb_sra_metadata.py import os import sys import csv import pandas as pd from pysradb.sraweb import SRAweb db = SRAweb() df = db.sra_metadata(&#39;PRJNA477349&#39;, detailed=True) df.to_csv(&#39;data/PRJNA477349_pysradb_metadata.csv&#39;, index=False) db = SRAweb() df = db.sra_metadata(&#39;PRJNA802976&#39;, detailed=True) df.to_csv(&#39;data/PRJNA802976_pysradb_metadata.csv&#39;, index=False) db = SRAweb() df = db.sra_metadata(&#39;PRJNA322554&#39;, detailed=True) df.to_csv(&#39;data/PRJNA322554_pysradb_metadata.csv&#39;, index=False) db = SRAweb() df = db.sra_metadata(&#39;PRJNA937707&#39;, detailed=True) df.to_csv(&#39;data/PRJNA937707_pysradb_metadata.csv&#39;, index=False) db = SRAweb() df = db.sra_metadata(&#39;PRJNA589182&#39;, detailed=True) df.to_csv(&#39;data/PRJNA589182_pysradb_metadata.csv&#39;, index=False) I sometimes experience ConnectionError when using python method. Try a different method if that happens. 2.4 Example querying SRA or ENA with a keyword Using keywords to search any extensive database helps filter user-specified information, such as certain disease-related studies. #!/bin/bash mamba install -c bioconda pysradb pysradb search --db sra -q Amplicon --max 100 &gt;sra_amplicon_studies.csv pysradb search --db ena -q Amplicon --max 100 &gt;ena_amplicon_studies.csv "],["exploring-sample-metadata.html", "3 Exploring sample metadata 3.1 Read size 3.2 Compare read size by BioProject 3.3 Read size by variables within a project 3.4 Interactive Sample GPS Map", " 3 Exploring sample metadata library(tidyverse) knitr::opts_chunk$set(comment = NA) 3.1 Read size The size of the reads can tell us how big is the dataset and can help to estimate the computational needs. Top five smallest project by read size read_csv(&quot;results/read_size_asc.csv&quot;, show_col_types = FALSE) %&gt;% head(5) # A tibble: 5 × 3 run bioproject bases &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 SRR3725509 PRJNA322554 581 2 SRR901080 PRJNA208226 89298 3 SRR3725412 PRJNA322554 100541 4 SRR901106 PRJNA208226 114181 5 SRR3725402 PRJNA322554 117824 Top five biggest project by read size read_csv(&quot;results/read_size_desc.csv&quot;, show_col_types = FALSE) %&gt;% head(5) # A tibble: 5 × 3 run bioproject bases &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 SRR10245303 PRJNA477349 434919320 2 SRR10245294 PRJNA477349 382616209 3 SRR10245352 PRJNA477349 316807915 4 SRR10245293 PRJNA477349 274398756 5 SRR10245330 PRJNA477349 265408834 3.2 Compare read size by BioProject 3.3 Read size by variables within a project 3.4 Interactive Sample GPS Map Dropping pins on the map is possible if you have coordinate data, such as latitudes and longitudes of collection points. The pins represent different projects, and by hovering over a pin, you will be able to see information about the corresponding project. Below is the interactive map: Interactive GPS Map Note: For the interactive experience, view this report in a browser that supports JavaScript. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
